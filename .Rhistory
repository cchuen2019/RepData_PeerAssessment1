install.packages("swirl")
SETWD
SETWD()
library(xml)
install.packages("XML")
library(xml)
library("XML", lib.loc="~/R/win-library/3.1")
lib <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
doc <- xmlTreeParse(lib,useInternal = TURE)
doc <- xmlTreeParse(lib,useInternal = TRUE)
lib <-"C:\Users\diablo\Desktop\courser\getdata_data_restaurants.xml"
lib <-"C:\\Users\\diablo\\Desktop\\courser\\getdata_data_restaurants.xml"
doc <- xmlTreeParse(lib,useInternal = TRUE)
? fread
?fread
??fread
library(data.table)
library(data.frame)
install.packages("data.table")
fread
??fread
DT <- read.csv("C:/Users/diablo/Desktop/coursera/getdata_data_ss06pid.csv")
View(DT)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
sapply(split(DT$pwgtp15,DT$SEX),mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
System.time(mean(DT$pwgtp15,by=DT$SEX))
install.packages("system.time")
system.time()
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
sapply(split(DT$pwgtp15,DT$SEX),mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
makeCacheMatrix <- function(x = matrix()) {
invertedMatrix <- NULL
set <- function(y) {
x <<- y
invertedMatrix <<- NULL
}
# Func to get & set the cached results of a inv. matrix value
get <- function() x
# Use solve() to inverse the matrix
setinverse <- function(solve) invertedMatrix <<- solve
getinverse <- function() invertedMatrix
list(set = set,get = get,
setInverse = setInverse,
getinverse = getInverse)
}
cacheSolve <- function(x, ...) {
invertedMatrix<- x$getinverse()
# Check if there is a cached matrix available
if(!is.null(invertedMatrix)) {
message("Retrieving cached matrix")
return(invertedMatrix)
}
# Retrieve the cached / matrix for calculation
matrix.to.inverse <- x$get()
invertedMatrix <- solve(matrix.to.inverse)
x$setInverse(invertedMatrix)
invertedMatrix
}
p <- matrix(2,2)
View(p)
p <- matrix(2,2;2,2)
p <- matrix(2,2:2,2)
View(p)
cacheSolve(p)
p <- matrix(2,2:2,2makeCacheMatrix <- function(x = matrix()) {
invertedMatrix <- NULL
set <- function(y) {
x <<- y
invMat <<- NULL
}
# Func to get & set the cached results of a inv. matrix value
get <- function() x
# Use solve() to inverse the matrix
setInv <- function(solve) invMat <<- solve
getInv <- function() invMat
list(set = set,get = get,
setInv = setInv,
getInv = getInv)
})
makeCacheMatrix <- function(x = matrix()) {
invertedMatrix <- NULL
set <- function(y) {
x <<- y
invMat <<- NULL
}
# Func to get & set the cached results of a inv. matrix value
get <- function() x
# Use solve() to inverse the matrix
setInv <- function(solve) invMat <<- solve
getInv <- function() invMat
list(set = set,get = get,
setInv = setInv,
getInv = getInv)
}
makeCacheMatrix <- function(x = matrix()) {
invMat <- NULL
set <- function(y) {
x <<- y
invMat <<- NULL
}
# Func to get & set the cached results of a inv. matrix value
get <- function() x
# Use solve() to inverse the matrix
setInv <- function(solve) invMat <<- solve
getInv <- function() invMat
list(set = set,get = get,
setInv = setInv,
getInv = getInv)
}
cacheSolve <- function(x, ...) {
invMat<- x$getinverse()
# Check if there is a cached matrix available
if(!is.null(invMat)) {
message("Retrieving cached matrix")
return(invMat)
}
# Retrieve the cached / matrix for calculation
matrix.to.inverse <- x$get()
invMat <- solve(matrix.to.inverse)
x$setInverse(invMat)
invMat
}
cacheSolve(p)
cacheSolve <- function(x, ...) {
invMat<- x$getInv()
# Check if there is a cached matrix available
if(!is.null(invMat)) {
message("Retrieving cached matrix")
return(invMat)
}
# Retrieve the cached / matrix for calculation
matToInverse <- x$get()
invMat <- solve(matToInverse)
x$setInverse(invMat)
#Print out results
invMat
}
cacheSolve(p)
invMat <- solve(matToInverse)
output.matrix
setInverse = setInverse,
setInverse = setInverse,
setInverse = setInverse,
## Function to calculate the inverse of a matrix
p = rbind(c(1, -1/4), c(-1/4, 1))
cacheSolve(p)
cacheSolve <- function(x, ...) {
output.matrix <- x$getInverse()
# Check if there is a cached matrix available
if(!is.null(output.matrix)) {
message("Retrieving cached matrix")
return(output.matrix)
}
# Retrieve the cached / matrix for calculation
temp.Matrix <- x$get()
output.matrix <- solve(temp.Matrix)
x$setInverse(output.matrix)
#Print out results
output.matrix
}
makeCacheMatrix <- function(input.matrix = matrix()) {
#Input matrix x
output.matrix <- NULL
set <- function(y) {
input.matrix <<- y
output.matrix <<- NULL
}
# Func to get & set the cached results of a inv. matrix value
get <- function() input.matrix
# Use solve() to inverse the matrix
setInverse <- function(solve) output.matrix <<- solve
getInverse <- function() output.matrix
list(set = set,get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve(p)
solve(p)
makeCacheMatrix <- function(input.matrix = matrix()) {
#Input matrix x
output.matrix <- NULL
set <- function(y) {
input.matrix <<- y
output.matrix <<- NULL
}
# Func to get & set the cached results of a inv. matrix value
get <- function() input.matrix
# Use solve() to inverse the matrix
set.Inverse <- function(solve) output.matrix <<- solve
get.Inverse <- function() output.matrix
list(set = set,get = get,
set.Inverse = set.Inverse,
get.Inverse = get.Inverse)
}
cacheSolve <- function(x, ...) {
output.matrix <- x$get.Inverse()
# Check if there is a cached matrix available
if(!is.null(output.matrix)) {
message("Retrieving cached matrix")
return(output.matrix)
}
# Retrieve the cached / matrix for calculation
temp.Matrix <- x$get()
output.matrix <- solve(temp.Matrix)
x$set.Inverse(output.matrix)
#Print out results
output.matrix
}
cacheSolve(p)
cacheSolve(makeCacheMatrix(2*diag(3)))
cacheSolve(makeCacheMatrix(p)
cacheSolve(makeCacheMatrix(p))
cacheSolve <- function(x, ...) {
output.matrix <- x$getInverse()
# Check if there is a cached matrix available
if(!is.null(output.matrix)) {
message("Retrieving cached matrix")
return(output.matrix)
}
# Retrieve the cached / matrix for calculation
temp.Matrix <- x$get()
output.matrix <- solve(temp.Matrix)
x$setInverse(output.matrix)
#Print out results
output.matrix
}
makeCacheMatrix <- function(input.matrix = matrix()) {
#Input matrix x
output.matrix <- NULL
set <- function(y) {
input.matrix <<- y
output.matrix <<- NULL
}
# Func to get & set the cached results of a inv. matrix value
get <- function() input.matrix
# Use solve() to inverse the matrix
setInverse <- function(solve) output.matrix <<- solve
getInverse <- function() output.matrix
list(set = set,get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve(makeCacheMatrix(p))
install.packages("xtable")
unzip("activity.zip")
activity <- read.csv("activity.csv",
header=TRUE,  na.strings="NA",
colClasses=c("numeric", "character", "numeric"))
setwd('C:\\Users\\diablo\\Desktop\\Coursera\\Reproducible_Research_Peer_Assessment_1\\RepData_PeerAssessment1')
library(knitr)
library(data.table)
library(xtable)
library(ggplot2)
unzip("activity.zip")
activity <- read.csv("activity.csv",
header=TRUE,  na.strings="NA",
colClasses=c("numeric", "character", "numeric"))
View(activity)
unzip("activity.zip")
activity <- read.csv("activity.csv",
header=TRUE,  na.strings="NA",
colClasses=c("numeric", "character", "numeric"))    activity <- factor(activity$interval)
activity <- as.Date(activity$date, format="%Y-%m-%d")
activity <- factor(activity$interval)
activity <- as.Date(activity$date, format="%Y-%m-%d")
